Console
The console is a panel that displays important messages, 
like errors,for developers. Much of the work the computer does with our code is 
invisible to us by default. If we want to see things appear on our screen, we can print, 
or log, to our console directly.

In JavaScript, the console keyword refers to an object, a collection of data and actions, 
that we can use in our code.

One action, or method, that is built into the console object is the .log() method. 
When we write console.log() what we put inside the parentheses will get printed, 
or logged, to the console.

Programming is often highly collaborative. In addition, our own code can quickly become 
difficult to understand when we return to it— sometimes only an hour later! 
For these reasons, it’s often useful to leave notes in our code for other 
developers or ourselves.

As we write JavaScript, we can write comments in our code that the computer will ignore 
as our program runs. These comments exist just for human readers.

Comments
Comments can explain what the code is doing, leave instructions for developers using the code, 
or add any other useful annotations.

Two types of comments
1. Single line comments - it is denoted with two forward slashes // preceding it.
2. A multi-line comment will comment out multiple lines and 
is denoted with /* to begin the comment, and */ to end the comment.

Data types
Data types are the classifications we give to the different kinds of data that we 
use in programming. In JavaScript, there are eight fundamental data types:

1. Number: Any number, including numbers with decimals: 4, 8, 1516, 23.42.
2. BigInt: Any number, greater than 2^53-1 or less than -(253-1), with n appended 
to the number: 1234567890123456n. BigInt is a special type in JavaScript used for working 
with really big numbers that can't be stored in a regular number type (Number).
JavaScript numbers use 64-bit floating point (IEEE 754), which means they can 
only safely store integers up to 9007199254740991 (2^53 - 1). If you go beyond this, 
calculations may be incorrect.
3. String: Any grouping of characters on your keyboard (letters, numbers, spaces, symbols, etc.) 
surrounded by single quotes: ' ... ' or double quotes " ... ", though we prefer single quotes. 
Some people like to think of string as a fancy word for text.
4.Boolean: This data type only has two possible values— either true or false (without quotes). 
It’s helpful to think of booleans as on and off switches or as the answers to a 
“yes” or “no” question.
5.Null: This data type represents the intentional absence of a value, and is 
represented by the keyword null (without quotes).
6.Undefined: This data type is denoted by the keyword undefined (without quotes). 
It also represents the absence of a value though it has a different use than null. 
undefined means that a given value does not exist.
7.Symbol: A newer feature to the language, symbols are unique identifiers, 
useful in more complex coding. No need to worry about these for now.
8. Objects: Collection of related data

The first 7 of those types are considered primitive data types. 
They are the most basic data types in the language. 

Arithmetic operators
An operator is a character that performs a task in our code. 
JavaScript has several built-in arithmetic operators, that allow us to perform 
mathematical calculations on numbers. These include the following operators 
and their corresponding symbols:
1. Add: +
2. Subtract: -
3. Multiply: *
4. Divide: /
5. Remainder: %

The remainder operator, sometimes called modulo, returns the number that remains 
after the right-hand number divides into the left-hand number as many times as 
it evenly can: 11 % 3 equals 2 because 3 fits into 11 three times, leaving 2 as the remainder.

String Concatenation
Operators aren’t just for numbers! When a + operator is used on two strings, 
it appends the right string to the left string:
This process of appending one string to another is called Concatenation

Properties
All data types have properties. For example, every string instance has a property called 
length that stores the number of characters in that string. 
You can retrieve property information by appending the string with a period and the property name:
console.log('Hello'.length); // Prints 5
The . is another operator! We call it the dot operator.
TASKKKKKKKKKKKK

Methods
Methods are actions we can perform.
We call, or use, these methods by appending an instance with:
a period (the dot operator)
the name of the method
opening and closing parentheses
E.g. 'example string'.methodName().

Does that syntax look a little familiar? 
When we use console.log() we’re calling the .log() method on the console object.
